{"version":3,"sources":["components/Alert.js","components/TableCell.js","components/View.js","components/DrivingCard.js","constants.js","actions.js","Utils/coordinates.js","Utils/checkForDirt.js","Utils/output.js","pages/Home.js","components/Grid.js","components/Jumbotron.js","pages/NoMatch.js","Nav/index.js","App.js","reducer.js","store.js","index.js"],"names":["AlertMsg","props","msg","color","Alert","variant","TableCell","step","drivingInstructions","currentRoombaLocation","dirtCollectedPerStep","wallHitByStep","console","log","View","data","Table","striped","bordered","hover","map","eachStep","DrivingCard","clicked","Card","Body","Text","addDrivingInstructions","type","payload","addSubmitMessage","y","yMaxDimension","x","xMaxDimension","xory","checkForDirt","currentLocation","arrayOfDirt","result","filter","dirtSpot","undefined","output","roomDimension","roombaLocation","dirtLocation","dirtCollected","wallsHit","results","currentDirtLocation","push","i","length","coordinate","Home","dispatch","useDispatch","useSelector","state","submitted","submitMsg","distanceTraveled","formik","useFormik","initialValues","xRoomDimension","yRoomDimension","xRoombaStarting","yRoombaStarting","xDirtLocation","yDirtLocation","validationSchema","Yup","shape","required","min","onSubmit","values","addRoombaLocation","addDirtLocation","setTimeout","Container","fluid","Row","Col","md","span","offset","className","Form","handleSubmit","xs","Label","Control","name","isInvalid","errors","getFieldProps","Feedback","Button","block","size","onClick","class","children","split","join","Jumbotron","style","height","clear","paddingTop","textAlign","NoMatch","role","aria-label","NavComponent","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","Link","App","exact","path","component","initialState","resultsData","store","createStore","action","concat","slice","item","index","compose","applyMiddleware","thunk","composeWithDevTools","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ceeeb17d.chunk.js","sourcesContent":["import Alert from 'react-bootstrap/Alert'\n\nimport React from 'react'\n\nfunction AlertMsg(props) {\n    const { msg, color } = props; \n    return (\n        <Alert variant={color}>\n            {msg} \n        </Alert>\n    )\n}\n\nexport default AlertMsg; \n","import React from 'react'\n\nexport default function TableCell(props) {\n    const { step,\n        drivingInstructions,\n        currentRoombaLocation,\n        dirtCollectedPerStep,\n        wallHitByStep,\n    } = props; \n    console.log('this is inside the table cell')\n    console.log(props)\n\n    return (\n        <tr>\n            <td>{step}</td>\n            <td>{currentRoombaLocation}</td>\n            <td>{drivingInstructions}</td>\n            <td>{dirtCollectedPerStep}</td>\n            <td>{wallHitByStep}</td>\n        </tr>\n    )\n}\n","import React from 'react'\nimport Table from 'react-bootstrap/Table'\nimport TableCell from './TableCell'\n\n\nfunction View(props) {\n    const { data } = props;\n\n    return (\n        <Table striped bordered hover>\n            <thead>\n                <tr>\n                    <th>Step #</th>\n                    <th>Roomba Location</th>\n                    <th>Action</th>\n                    <th>Total Dirt Collected </th>\n                    <th>Total Walls hit </th>\n                </tr>\n            </thead>\n            <tbody>\n               {data.map(eachStep => <TableCell {...eachStep} />)}\n            </tbody>\n        </Table>\n    )\n}\n\n\nexport default View; ","import Card from 'react-bootstrap/Card'\nimport React from 'react'\n\nexport default function DrivingCard(props) {\n    const {\n        drivingInstructions,\n        clicked\n    } = props;\n    return (\n        <div>\n            <Card>\n                <Card.Body>\n                    <Card.Text>\n                        {clicked && drivingInstructions ? drivingInstructions + ',' : 'click buttons to enter driving instructions here... '}\n                </Card.Text>\n                </Card.Body>\n            </Card>\n        </div>\n    )\n}\n","// * USER INPUT ******\nexport const ADD_ROOM_DIMENSION = 'ADD_ROOM_DIMENSION'; \nexport const ADD_ROOMBA_LOCATION = 'ADD_ROOMBA_LOCATION';\nexport const ADD_DIRT_LOCATION = 'ADD_DIRT_LOCATION'; \nexport const ADD_DRIVING_INSTRUCTIONS = 'ADD_DRIVING_INSTRUCTIONS'; \nexport const BACKSPACE_DRIVING_INSTRUCTIONS = 'BACKSPACE_DRIVING_INSTRUCTIONS'; \nexport const CLEAR_DRIVING_INSTRUCTIONS = 'CLEAR_DRIVING_INSTRUCTIONS'; \n// ******************\n\nexport const ADD_SUBMITMESSAGE = 'ADD_SUBMITMESSAGE'; \n\n// distance traveled\nexport const INCREASE_DISTANCE_TRAVELED = 'INCREASE_DISTANCE_TRAVELED'; \n\n// wall hit\nexport const INCREASE_WALL_HIT = 'INCREASE_WALL_HIT';\n\n// dirt collected\nexport const INCREASE_DIRT_COLLECTED = 'INCREASE_DIRT_COLLECTED';\n\n// update Roomba location \nexport const INCREASE_X = 'INCREASE_X'; \nexport const INCREASE_Y = 'INCREASE_Y'; \nexport const DECREASE_X = 'DECREASE_X'; \nexport const DECREASE_Y = 'DECREASE_Y'; \n\nexport const SUBMIT_RESULTS = 'SUBMIT_RESULTS'; \nexport const POST_RESULTS = 'POST_RESULTS'; \n\n","import {\n  ADD_ROOM_DIMENSION,\n  ADD_ROOMBA_LOCATION,\n  ADD_DIRT_LOCATION,\n  ADD_DRIVING_INSTRUCTIONS,\n  ADD_SUBMITMESSAGE,\n  BACKSPACE_DRIVING_INSTRUCTIONS,\n  CLEAR_DRIVING_INSTRUCTIONS,\n  SUBMIT_RESULTS,\n  POST_RESULTS,\n  INCREASE_DISTANCE_TRAVELED,\n  INCREASE_WALL_HIT,\n  INCREASE_DIRT_COLLECTED,\n  INCREASE_X,\n  INCREASE_Y,\n  DECREASE_X,\n  DECREASE_Y,\n} from './constants';\n\n// *** USER INPUT ****\nexport const addRoomDimension = (data) => ({\n  type: ADD_ROOM_DIMENSION,\n  payload: data\n});\nexport const addRoombaLocation = (data) => ({\n  type: ADD_ROOMBA_LOCATION,\n  payload: data\n});\nexport const addDirtLocation = (data) => ({\n  type: ADD_DIRT_LOCATION,\n  payload: data\n});\nexport const addDrivingInstructions = (data) => ({\n  type: ADD_DRIVING_INSTRUCTIONS,\n  payload: data\n});\nexport const backspaceDrivingInstructions = () => ({\n  type: BACKSPACE_DRIVING_INSTRUCTIONS\n});\nexport const clearDrivingInstructions = () => ({\n  type: CLEAR_DRIVING_INSTRUCTIONS\n});\n// *******************\n\nexport const addSubmitMessage = (data) => ({\n  type: ADD_SUBMITMESSAGE,\n  payload: data\n});\n\nexport const postResults = (results) => ({\n  type: POST_RESULTS,\n  payload: results\n});\nexport const submitResults = (results) => ({\n  type: SUBMIT_RESULTS\n});\n\n// distance Traveled\nexport const increaseDistanceTraveled = () => ({\n  type: INCREASE_DISTANCE_TRAVELED,\n})\n\n\n// wallshit \nexport const increaseWallhit = () => ({\n  type: INCREASE_WALL_HIT,\n})\n\n// DIRT COLLECTED \nexport const increaseDirtCollected = () => ({\n  type: INCREASE_DIRT_COLLECTED,\n})\n\n\n// updating location of roomba \nexport const increaseX = () => ({\n  type: INCREASE_X,\n})\nexport const increaseY = () => ({\n  type: INCREASE_Y,\n})\nexport const decreaseX = () => ({\n  type: DECREASE_X,\n})\nexport const decreaseY = () => ({\n  type: DECREASE_Y,\n})\n\n","export default {\n    checkIfMaxY : (y, yMaxDimension) =>  y !== yMaxDimension,\n    checkIfMaxX : (x, xMaxDimension) =>  x !== xMaxDimension,\n    checkIfZero : (xory) => xory > 0\n};","function checkForDirt(currentLocation, arrayOfDirt) {\n    let result = [arrayOfDirt].filter(dirtSpot => {\n        return dirtSpot[0] === currentLocation[0] && dirtSpot[1] === currentLocation[1]\n    })\n    // this returns an empty array if there are no matches or the location where there was dirt \n    if(result[0] === undefined){\n        console.log(`we are not collecting dirt 0, also this is the result array`);\n        console.log(result)\n        return 0; \n    }\n    else{\n        console.log(`we are collecting dirt 1, also this is the result array `);\n        console.log(result)\n        // we also could remove that array from the list of dirty location although not specified\n        return 1; \n    }\n}\n\nexport default checkForDirt;","// importing Utils \nimport coordinate from '../Utils/coordinates'\nimport checkForDirt from '../Utils/checkForDirt'\n\nconst output = (data) => {\n    // const { roomDimension, roombaLocation, currentDirtLocation, drivingInstructions } = userData;\n    const { roomDimension, roombaLocation, dirtLocation, drivingInstructions, dirtCollected, wallsHit } = data;\n\n    let currentRoombaLocation = roombaLocation;\n    let dirtCollectedPerStep = 0;\n    let wallHitByStep = wallsHit;\n    let distanceTraveledPerStep = 0;\n    let results = [];\n    let currentDirtLocation = dirtLocation\n\n    console.log(`current Roomba Location ${currentRoombaLocation} this is how this starts`); \n    console.log(`This is the current the dirt location ${currentDirtLocation} `); \n\n    results.push({\n        step: '1',\n        currentRoombaLocation: `[${currentRoombaLocation[0]}, ${currentRoombaLocation[1]}]`,\n        dirtCollectedPerStep,\n        wallHitByStep\n    });\n    for (let i = 0; i < drivingInstructions.length; i++) {\n        if (drivingInstructions[i] === 'N') {\n\n            if (coordinate.checkIfMaxY(currentRoombaLocation[1], roomDimension[1])) {\n                currentRoombaLocation[1] = currentRoombaLocation[1] + 1\n                console.log(checkForDirt(currentRoombaLocation, currentDirtLocation), 'this should be a number ')\n                dirtCollectedPerStep = dirtCollectedPerStep + checkForDirt(currentRoombaLocation, currentDirtLocation)\n                // console.log(` Step ${i + 2} | Roomba location ${currentRoombaLocation}, | Action ${drivingInstructions[i]}, |  dirt collected so far ${dirtCollectedPerStep}, wall hits ${wallHitByStep}`);\n                distanceTraveledPerStep = distanceTraveledPerStep + 1;\n                results.push({\n                    step: i + 2,\n                    drivingInstructions: drivingInstructions[i],\n                    currentRoombaLocation: `[${currentRoombaLocation[0]}, ${currentRoombaLocation[1]}]`,\n                    dirtCollectedPerStep,\n                    wallHitByStep\n                });\n                // check max \n            } else {\n                // this mean we hit a wall so we dont add, all we do is add a point to wall hit \n                wallHitByStep++;\n                // then we report the new stats\n                // console.log(` Step ${i + 2} |  Roomba location ${currentRoombaLocation}, | Action ${drivingInstructions[i]}, |  dirt collected so far ${dirtCollectedPerStep}, wall hits ${wallHitByStep}`);\n                results.push({\n                    step: i + 2,\n                    drivingInstructions: drivingInstructions[i],\n                    currentRoombaLocation:`[${currentRoombaLocation[0]}, ${currentRoombaLocation[1]}]`,\n                    dirtCollectedPerStep,\n                    wallHitByStep\n                });\n            }\n\n        }\n        else if (drivingInstructions[i] === 'S') {\n\n            // if it comes back as true then we may go south \n            if (coordinate.checkIfZero(currentRoombaLocation[1])) {\n                currentRoombaLocation[1] = currentRoombaLocation[1] - 1\n                console.log(checkForDirt(currentRoombaLocation, currentDirtLocation), 'this should be a number ')\n                dirtCollectedPerStep = dirtCollectedPerStep + checkForDirt(currentRoombaLocation, currentDirtLocation)\n                // console.log(`Step ${i + 2} |  Roomba location ${currentRoombaLocation}, | Action ${drivingInstructions[i]}, |  dirt collected so far ${dirtCollectedPerStep}, wall hits ${wallHitByStep}`);\n                // check max \n                distanceTraveledPerStep = distanceTraveledPerStep + 1;\n                results.push({\n                    step: i + 2,\n                    drivingInstructions: drivingInstructions[i],\n                    currentRoombaLocation:`[${currentRoombaLocation[0]}, ${currentRoombaLocation[1]}]`,\n                    dirtCollectedPerStep,\n                    wallHitByStep\n                });\n            } else {\n                // this mean we hit a wall so we dont add, all we do is add a point to wall hit \n                wallHitByStep++;\n                // then we report the new stats\n                // console.log(`Step ${i + 2} |  Roomba location ${currentRoombaLocation}, | Action ${drivingInstructions[i]}, |  dirt collected so far ${dirtCollectedPerStep}, wall hits ${wallHitByStep}`);\n                results.push({\n                    step: i + 2,\n                    drivingInstructions: drivingInstructions[i],\n                    currentRoombaLocation:`[${currentRoombaLocation[0]}, ${currentRoombaLocation[1]}]`,\n                    dirtCollectedPerStep,\n                    wallHitByStep\n                });\n            }\n\n        }\n        else if (drivingInstructions[i] === 'E') {\n\n            if (coordinate.checkIfMaxX(currentRoombaLocation[0], roomDimension[0])) {\n                currentRoombaLocation[0] = currentRoombaLocation[0] + 1\n                console.log(checkForDirt(currentRoombaLocation, currentDirtLocation), 'this should be a number ')\n                dirtCollectedPerStep = dirtCollectedPerStep + checkForDirt(currentRoombaLocation, currentDirtLocation)\n                // console.log(`Step ${i + 2} |  Roomba location ${currentRoombaLocation}, | Action ${drivingInstructions[i]}, |  dirt collected so far ${dirtCollectedPerStep}, wall hits ${wallHitByStep}`);\n                // check max \n                distanceTraveledPerStep = distanceTraveledPerStep + 1;\n\n                results.push({\n                    step: i + 2,\n                    drivingInstructions: drivingInstructions[i],\n                    currentRoombaLocation:`[${currentRoombaLocation[0]}, ${currentRoombaLocation[1]}]`,\n                    dirtCollectedPerStep,\n                    wallHitByStep\n                });\n            } else {\n                // this mean we hit a wall so we dont add, all we do is add a point to wall hit \n                wallHitByStep++;\n                // then we report the new stats\n                // console.log(`Step ${i + 2} |  Roomba location ${currentRoombaLocation}, | Action ${drivingInstructions[i]}, |  dirt collected so far ${dirtCollectedPerStep}, wall hits ${wallHitByStep}`);\n                results.push({\n                    step: i + 2,\n                    drivingInstructions: drivingInstructions[i],\n                    currentRoombaLocation:`[${currentRoombaLocation[0]}, ${currentRoombaLocation[1]}]`,\n                    dirtCollectedPerStep,\n                    wallHitByStep\n                });\n            }\n\n        }\n        else if (drivingInstructions[i] === 'W') {\n\n            // if it comes back as true then we may go south \n            if (coordinate.checkIfZero(currentRoombaLocation[0])) {\n                currentRoombaLocation[0] = currentRoombaLocation[0] - 1\n                console.log(checkForDirt(currentRoombaLocation, currentDirtLocation), 'this should be a number ')\n                dirtCollectedPerStep = dirtCollectedPerStep + checkForDirt(currentRoombaLocation, currentDirtLocation)\n                // console.log(`Step ${i + 2} |  Roomba location ${currentRoombaLocation}, | Action ${drivingInstructions[i]}, |  dirt collected so far ${dirtCollectedPerStep}, wall hits ${wallHitByStep}`);\n                // check max \n                distanceTraveledPerStep = distanceTraveledPerStep + 1;\n                results.push({\n                    step: i + 2,\n                    drivingInstructions: drivingInstructions[i],\n                    currentRoombaLocation:`[${currentRoombaLocation[0]}, ${currentRoombaLocation[1]}]`,\n                    dirtCollectedPerStep,\n                    wallHitByStep\n                });\n            } else {\n                // this mean we hit a wall so we dont add, all we do is add a point to wall hit \n                wallHitByStep++;\n                // then we report the new stats\n                // console.log(`Step ${i + 2} | Roomba location ${currentRoombaLocation}, | Action ${drivingInstructions[i]}, |  dirt collected so far ${dirtCollectedPerStep}, wall hits ${wallHitByStep}`);\n                results.push({\n                    step: i + 2,\n                    drivingInstructions: drivingInstructions[i],\n                    currentRoombaLocation:`[${currentRoombaLocation[0]}, ${currentRoombaLocation[1]}]`,\n                    dirtCollectedPerStep,\n                    wallHitByStep\n                });\n            }\n\n        }\n    }\n\n    results.push({\n        step: results.length + 1,\n        drivingInstructions: ` done `,\n        currentRoombaLocation:`[${currentRoombaLocation[0]}, ${currentRoombaLocation[1]}]`,\n        dirtCollectedPerStep: dirtCollectedPerStep,\n        wallHitByStep: wallHitByStep\n    });\n    console.log('this is the full result history')\n    console.log(results);\n    return results;\n}\n\nexport default output;","import React from 'react';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport Form from 'react-bootstrap/Form'\nimport Container from 'react-bootstrap/Container'\nimport Col from 'react-bootstrap/Col'\nimport Row from 'react-bootstrap/Row'\nimport Button from 'react-bootstrap/Button'\nimport Alert from '../components/Alert'\nimport View from '../components/View'\nimport DrivingCard from '../components/DrivingCard'\nimport {\n    addDrivingInstructions,\n    backspaceDrivingInstructions,\n    clearDrivingInstructions,\n    addRoomDimension,\n    addRoombaLocation,\n    addDirtLocation,\n    addSubmitMessage,\n    submitResults,\n    // postResults,\n    // increaseDistanceTraveled,\n    // increaseWallhit,\n    // increaseDirtCollected,\n    // increaseX,\n    // increaseY,\n    // decreaseX,\n    // decreaseY,\n} from '../actions';\nimport { useDispatch, useSelector } from 'react-redux';\n\n//importing Utils \nimport output from '../Utils/output'\n\nfunction Home(props) {\n    const dispatch = useDispatch();\n\n    // const [results, setResults] = useState(false);\n\n    const [\n        submitted,\n        clicked,\n        roomDimension,\n        roombaLocation,\n        dirtLocation,\n        drivingInstructions,\n        submitMsg,\n        dirtCollected,\n        wallsHit,\n        // distanceTraveled,\n    ] = useSelector((state) => [\n        state.submitted,\n        state.clicked,\n        state.roomDimension,\n        state.roombaLocation,\n        state.dirtLocation,\n        state.drivingInstructions,\n        state.submitMsg,\n        state.dirtCollected,\n        state.wallsHit,\n        state.distanceTraveled\n    ]);\n\n    const formik = useFormik({\n        initialValues: {\n            xRoomDimension: 0,\n            yRoomDimension: 0,\n            xRoombaStarting: 0,\n            yRoombaStarting: 0,\n            xDirtLocation: 0,\n            yDirtLocation: 0,\n        },\n        validationSchema: Yup.object().shape({\n            xRoomDimension: Yup.number().required('Required').min(0, 'x coordinate must be zero or greater'),\n            yRoomDimension: Yup.number().required('Required').min(0, 'y coordinate must be zero or greater'),\n            xRoombaStarting: Yup.number().required('Required').min(0, 'x Roomba coordinate must be zero or greater'),\n            yRoombaStarting: Yup.number().required('Required').min(0, 'y Roomba coordinate must be zero or greater'),\n            xDirtLocation: Yup.number().required('Required').min(0, 'x dirt coordinate must be zero or greater'),\n            yDirtLocation: Yup.number().required('Required').min(0, 'y dirt coordinate must be zero or greater'),\n        }),\n        onSubmit: (values) => {\n            // here we will add the starting values for roomba \n            dispatch(addRoomDimension([values.xRoomDimension, values.yRoomDimension]))\n            dispatch(addRoombaLocation([values.xRoombaStarting, values.yRoombaStarting]))\n            dispatch(addDirtLocation([values.xDirtLocation, values.yDirtLocation]))\n            dispatch(addSubmitMessage('your info has been submitted 😊, your result are available in the Results page!'))\n            dispatch(submitResults())\n\n            setTimeout(function () {\n                dispatch(addSubmitMessage(''));\n            }, 4000);//run 2 seconds to clear the message \n\n        },\n    });\n\n    const north = () => dispatch(addDrivingInstructions('N'));\n    const south = () => dispatch(addDrivingInstructions('S'));\n    const east = () => dispatch(addDrivingInstructions('E'));\n    const west = () => dispatch(addDrivingInstructions('W'));\n    const backspace = () => dispatch(backspaceDrivingInstructions());\n    const clear = () => dispatch(clearDrivingInstructions());\n\n\n    return (\n        !submitted ? (\n            <Container fluid>\n                <Row>\n                    <Col md={{ span: 9, offset: 2 }} className='mt-4' >\n                        <Form onSubmit={formik.handleSubmit} >\n                            <Form.Row>\n                                <Col xs={12}>\n                                    <Row>\n                                        <Col xs={12}>\n                                            <Form.Label>Room Dimensions </Form.Label>\n                                        </Col>\n                                        <Col xs={12}>\n                                            <Form.Text>Starting x dimension</Form.Text>\n                                            <Form.Control\n                                                type=\"number\"\n                                                name=\"xRoomDimension\"\n                                                isInvalid={formik.errors.xRoomDimension}\n                                                {...formik.getFieldProps('xRoomDimension')} />\n                                            <Form.Control.Feedback type=\"invalid\">\n                                                {formik.errors.xRoomDimension}\n                                            </Form.Control.Feedback>\n                                        </Col>\n                                        <Col xs={12}>\n                                            <Form.Text>Starting y dimension</Form.Text>\n                                            <Form.Control\n                                                type=\"number\"\n                                                name=\"yRoomDimension\"\n                                                isInvalid={formik.errors.yRoomDimension}\n                                                {...formik.getFieldProps('yRoomDimension')} />\n                                            <Form.Control.Feedback type=\"invalid\">\n                                                {formik.errors.yRoomDimension}\n                                            </Form.Control.Feedback>\n                                        </Col>\n                                        <Col xs={12} className='mt-4' >\n                                            <Form.Label>Roomba Starting Location </Form.Label>\n                                        </Col>\n                                        <Col xs={12}>\n                                            <Form.Text>Starting x coordinate</Form.Text>\n                                            <Form.Control\n                                                type=\"number\"\n                                                name=\"xRoombaStarting\"\n                                                isInvalid={formik.errors.xRoombaStarting}\n                                                {...formik.getFieldProps('xRoombaStarting')} />\n                                            <Form.Control.Feedback type=\"invalid\">\n                                                {formik.errors.xRoombaStarting}\n                                            </Form.Control.Feedback>\n                                        </Col>\n                                        <Col xs={12}>\n                                            <Form.Text>Starting y coordinate</Form.Text>\n                                            <Form.Control\n                                                type=\"number\"\n                                                name=\"yRoombaStarting\"\n                                                isInvalid={formik.errors.yRoombaStarting}\n                                                {...formik.getFieldProps('yRoombaStarting')} />\n                                            <Form.Control.Feedback type=\"invalid\">\n                                                {formik.errors.yRoombaStarting}\n                                            </Form.Control.Feedback>\n                                        </Col>\n                                        <Col xs={12} md={6} className='mt-4' >\n                                            <Row>\n                                                <Col xs={12} className='mt-4' >\n                                                    <Form.Label>Driving Instructions</Form.Label>\n                                                </Col>\n                                                <Col xs={12} >\n                                                    <DrivingCard\n                                                        drivingInstructions={drivingInstructions}\n                                                        clicked={clicked}\n                                                    />\n                                                </Col>\n                                                <Col xs={6} className='mt-4' >\n                                                    <Button block size=\"lg\" onClick={north} >North</Button>\n                                                </Col>\n                                                <Col xs={6} className='mt-4' >\n                                                    <Button block size=\"lg\" onClick={south} >South</Button>\n                                                </Col>\n                                                <Col xs={6} className='mt-4' >\n                                                    <Button block className='pr-4' size=\"lg\" onClick={east} >East</Button>\n                                                </Col>\n                                                <Col xs={6} className='mt-4' >\n                                                    <Button block size=\"lg\" onClick={west} >West</Button>\n                                                </Col>\n                                                <Col xs={6} className='mt-4' >\n                                                    <Button block size=\"lg\" onClick={backspace} >\n                                                        <i class=\"fas fa-backspace\"></i>\n                                                    </Button>\n                                                </Col>\n                                                <Col xs={6} className='mt-4' >\n                                                    <Button block size=\"lg\" onClick={clear} >Clear</Button>\n                                                </Col>\n                                            </Row>\n                                        </Col>\n                                        <Col xs={12} md={6} className='mt-4' >\n                                            <Col xs={12} className='mt-4' >\n                                                <Form.Label>Dirt Location </Form.Label>\n                                            </Col>\n                                            <Col xs={12} className='mt-4' >\n                                                <Form.Text>x coordinate</Form.Text>\n                                                <Form.Control\n                                                    type=\"number\"\n                                                    name=\"xDirtLocation\"\n                                                    isInvalid={formik.errors.xDirtLocation}\n                                                    {...formik.getFieldProps('xDirtLocation')} />\n                                                <Form.Control.Feedback type=\"invalid\">\n                                                    {formik.errors.xDirtLocation}\n                                                </Form.Control.Feedback>\n                                            </Col>\n                                            <Col xs={12} className='mt-4'>\n                                                <Form.Text>y coordinate</Form.Text>\n                                                <Form.Control\n                                                    type=\"number\"\n                                                    name=\"yDirtLocation\"\n                                                    isInvalid={formik.errors.yDirtLocation}\n                                                    {...formik.getFieldProps('yDirtLocation')} />\n                                                <Form.Control.Feedback type=\"invalid\">\n                                                    {formik.errors.yDirtLocation}\n                                                </Form.Control.Feedback>\n                                            </Col>\n                                        </Col>\n                                        <Col xs={12} className='mt-4' >\n                                            {\n                                                drivingInstructions.length === 0 ? (\n                                                    <Alert msg={'Fill out all field to submit'} color={'danger'} />\n                                                ) : (\n                                                        <Button size='lg' block variant=\"primary\" type=\"submit\">\n                                                            Submit\n                                                        </Button>\n                                                    )\n\n                                            }\n                                            <Form.Control.Feedback type=\"isValid\" >\n                                                {\n                                                    submitMsg ? <Alert msg={submitMsg} color={'primary'} /> : ''\n                                                }\n                                            </Form.Control.Feedback>\n                                        </Col>\n                                    </Row>\n                                </Col>\n                            </Form.Row>\n                        </Form>\n\n                    </Col>\n                </Row >\n            </Container >) :\n\n            (\n                <Container fluid>\n                    <Row>\n                        <Col md={{ span: 9, offset: 2 }} className='mt-4' >\n\n                            <View data={output({\n                                roomDimension,\n                                roombaLocation,\n                                dirtLocation,\n                                drivingInstructions,\n                                dirtCollected,\n                                wallsHit,\n                            })} />\n                        </Col>\n                    </Row >\n                </Container >\n            )\n\n    );\n}\n\nexport default Home;\n\n\n\n\n\n\n","import React from \"react\";\n\n// Exporting the Container, Row, and Col components from this file\n\n// This Container component allows us to use a bootstrap container without worrying about class names\nexport function Container({ fluid, children }) {\n  return <div className={`container${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\n}\n\n// This Row component lets us use a bootstrap row without having to think about class names\nexport function Row({ fluid, children }) {\n  return <div className={`row${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\n}\n\n// This Col component lets us size bootstrap columns with less syntax\n// e.g. <Col size=\"md-12\"> instead of <div className=\"col-md-12\">\nexport function Col({ size, children }) {\n  return (\n    <div\n      className={size\n        .split(\" \")\n        .map(size => \"col-\" + size)\n        .join(\" \")}\n    >\n      {children}\n    </div>\n  );\n}","import React from \"react\";\n\nfunction Jumbotron({ children }) {\n  return (\n    <div\n      style={{ height: 300, clear: \"both\", paddingTop: 90, textAlign: \"center\" }}\n      className=\"jumbotron mt-3\"\n    >\n      {children}\n    </div>\n  );\n}\n\nexport default Jumbotron;","import React from \"react\";\nimport { Col, Row, Container } from \"../components/Grid\";\nimport Jumbotron from \"../components/Jumbotron\";\n\nfunction NoMatch() {\n  return (\n    <Container fluid>\n      <Row>\n        <Col size=\"md-12\">\n          <Jumbotron>\n            <h1>404 Page Not Found</h1>\n            <h1>\n              <span role=\"img\" aria-label=\"Face With Rolling Eyes Emoji\">\n                🙄 🙄 🙄 🕳 \n              </span>\n            </h1>\n          </Jumbotron>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default NoMatch;","import React from \"react\";\nimport Navbar from 'react-bootstrap/Navbar'\nimport Nav from 'react-bootstrap/Nav'\n\nfunction NavComponent() {\n  return (\n    <Navbar bg=\"light\" expand=\"lg\">\n      <Navbar.Brand href=\"/\">ROOMBA CHALLENGE </Navbar.Brand>\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n      <Navbar.Collapse id=\"basic-navbar-nav\">\n        <Nav className=\"mr-auto\">\n          <Nav.Link href=\"/\">Home</Nav.Link>\n        </Nav>\n      </Navbar.Collapse>\n    </Navbar>\n  );\n}\n\nexport default NavComponent;","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Home from \"./pages/Home\"\nimport NoMatch from \"./pages/NoMatch\";\nimport Nav from \"./Nav/index\";\n\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <Nav />\n        <Switch>\n          <Route exact path={\"/\"} component={Home} />\n          <Route exact path=\"/*\" component={NoMatch} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","import {\n  // *** USER INPUTS ***** \n  ADD_ROOM_DIMENSION,\n  ADD_ROOMBA_LOCATION,\n  ADD_DIRT_LOCATION,\n  ADD_DRIVING_INSTRUCTIONS,\n  ADD_SUBMITMESSAGE,\n  BACKSPACE_DRIVING_INSTRUCTIONS,\n  CLEAR_DRIVING_INSTRUCTIONS,\n  SUBMIT_RESULTS,\n  POST_RESULTS,\n  INCREASE_DISTANCE_TRAVELED,\n  INCREASE_WALL_HIT,\n  INCREASE_DIRT_COLLECTED,\n  INCREASE_X,\n  INCREASE_Y,\n  DECREASE_X,\n  DECREASE_Y,\n} from './constants';\n\n\nexport const initialState = {\n  submitted: false,\n  clicked: false,\n  submitMsg: '',\n  dirtCollected: 0,\n  wallsHit: 0,\n  distanceTraveled: 0,\n  // USER INPUTS \n  roomDimension: [],\n  roombaLocation: [],\n  dirtLocation: [],\n  drivingInstructions: [],\n  // OUTPUT \n  resultsData: []\n};\n\n// this is our dispatcher \nexport default (state = initialState, action) => {\n  switch (action.type) {\n    // USER INPUT \n    case ADD_ROOM_DIMENSION:\n      return { ...state, roomDimension: action.payload }\n    case ADD_ROOMBA_LOCATION:\n      return { ...state, roombaLocation: action.payload }\n    case ADD_DRIVING_INSTRUCTIONS:\n      return { ...state, drivingInstructions: state.drivingInstructions.concat(action.payload), clicked: true }\n    case ADD_DIRT_LOCATION:\n      return { ...state, dirtLocation: action.payload }\n    case BACKSPACE_DRIVING_INSTRUCTIONS:\n      return { ...state, drivingInstructions: state.drivingInstructions.slice(0, -1) }\n    case CLEAR_DRIVING_INSTRUCTIONS:\n      return { ...state, drivingInstructions: [], clicked: false }\n    case ADD_SUBMITMESSAGE: return { ...state, submitMsg: action.payload }\n    case SUBMIT_RESULTS: return { ...state, submitted: true }\n    case POST_RESULTS: return { ...state, resultsData: action.payload }\n    case INCREASE_DISTANCE_TRAVELED: return { ...state, distanceTraveled: state.distanceTraveled + 1 }\n    case INCREASE_WALL_HIT: return { ...state, wallsHit: state.wallsHit + 1 }\n    case INCREASE_DIRT_COLLECTED: return { ...state, dirtCollected: state.dirtCollected + 1 }\n    // location update code \n    case INCREASE_X: return { ...state, roombaLocation: state.roombaLocation.map((item, index) => (index === 0)? item + 1 : item) }\n    case INCREASE_Y: return { ...state, roombaLocation: state.roombaLocation.map((item, index) => (index === 1)? item + 1 : item) }\n    case DECREASE_X: return { ...state, roombaLocation: state.roombaLocation.map((item, index) => (index === 0)? item - 1 : item) }\n    case DECREASE_Y: return { ...state, roombaLocation: state.roombaLocation.map((item, index) => (index === 1)? item - 1 : item) }\n    default: return state;\n  }\n};\n\n\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport reducer, { initialState } from './reducer';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\n\nconst store = createStore(\n  reducer,\n  initialState,\n  compose(applyMiddleware(thunk), composeWithDevTools())\n);\n\n\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport {Provider} from 'react-redux'\nimport store from './store'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}